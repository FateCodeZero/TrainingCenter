<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 1、对所有过滤链放行 静态资源及指定页面的 url请求-->
    <security:http security="none" pattern="/webpages/static/**"/>
    <security:http security="none" pattern="/webpages/errorpage/**"/>
    <security:http security="none" pattern="/except/kaptcha"/>
    <security:http security="none" pattern="/plug-in/**"/>

    <security:http security="none" pattern="/index.jsp"/>
    <security:http security="none" pattern="/user/goLogin/**"/>
    <security:http security="none" pattern="/user/goRegister/**"/>
    <security:http security="none" pattern="/user/usernameCheck/**"/>

    <!--2、开启基于表达式/注解的权限管理，必须在 spring-mvc 配置文件中配置，否则扫描不到 Controller 层
        使用方法级别的自定义注解表达式处理器-->
    <bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
        <property name="permissionEvaluator">
            <bean class="com.trainingcenter.security.authentication.evaluator.PermissionEvaluatorImpl"/>
        </property>
    </bean>

    <!--3、启用自定义登录认证管理器-->
    <!--(1)验证码认证管理器-->
    <security:authentication-manager id="kaptchaAuthenticationManager"/>
    <!--(2)登录信息认证管理器 -->
    <security:authentication-manager id="userInfoAuthenticationManager">
        <!--自定义登录用户验证规则-->
        <security:authentication-provider ref="userAuthenticationProvider"/>
    </security:authentication-manager>
    <!--注册配置自定义用户登录效验类-->
    <bean id="userAuthenticationProvider" class="com.trainingcenter.security.authentication.providers.UserAuthenticationProvider"/>

    <!--4、管理项目下所有url的访问权限，
            URL权限控制：只是对请求的url进行基于角色的粗略权限控制
            要进行细粒的权限控制，需要使用注解配合，可做到方法级别的权限控制
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--（0）开启浏览器加载 frame页面
            DENY：浏览器拒绝当前页面加载任何Frame页面（默认）
            SAMEORIGIN：frame页面的地址只能为同源域名下的页面
            ALLOW-FROM：origin为允许frame加载的页面地址。（不安全）
            -->
        <security:headers>
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>

        <!--（1）开启匿名访问支持-->
        <security:anonymous enabled="true" key="doesNotMatter" username="anonymousUser" granted-authority="ROLE_ANONYMOUS"/>

        <!--2、权限初步管理，基于角色，再通过注解对每个方法进行细化管理-->
        <!--用户文件夹至少需要用户权限-->
        <security:intercept-url pattern="/webpages/user/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>

        <!--管理员文件夹下需要管理员权限-->
        <security:intercept-url pattern="/webpages/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/**/*admin*/**" access="hasRole('ROLE_ADMIN')"/>

        <!--
            （3）、设定登录规则：
            form-login：指定自定义登录页面为 /login.jsp。
                    login-page：指定自定义登录页面
                    login-processing-url：指定登录数据请求的url，
                    username-parameter：指定用户名输入框的name属性
                    password-parameter：指定密码输入框的name属性
                    default-target-url：指定直接请求登录页面的用户登录成功后返回的页面
                    authentication-success-forward-url：指定被拦截时登录成功后跳转的url
                    authentication-failure-url：指定登录认证失败返回的页面
                    authentication-success-handler-ref：指定自定义的登录成功后处理器，使用后之前设置的登录成功后跳转都会失效
                    authentication-failure-handler-ref：指定自定义的认证失败后处理器，使用后默认的认证失败后跳转都会失效
                    -->
        <security:form-login login-page="/webpages/static/login.jsp"
                             login-processing-url="/user/login"
                             username-parameter="username"
                             password-parameter="password"
                             default-target-url="/index.jsp"
                             authentication-success-handler-ref="authenticationSuccessHandler"
                             authentication-failure-handler-ref="authenticationFailureHandler"/>

        <!--（4）添加session管理-->
        <security:session-management invalid-session-url="/webpages/static/login.jsp"
                                     session-authentication-error-url="/index.jsp"
                                     session-fixation-protection="migrateSession">

            <!--修改默认的后一次登录覆盖前一次登录的防止重复登录策略，改为不让已登录用户再次登录
                error-if-maximum-exceeded="true"：限制用户重复登录，会重定向到由form-login指定的authentication-failure-url
                expired-url：指定当用户尝试使用一个由于其再次登录导致session超时的session时所要跳转的页面URL。
                    注：该URL也需要设为不受 security 管理
            -->
            <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" expired-url="/index.jsp" />
        </security:session-management>

        <!--（4）注销：
            logout-url：指定注销请求的url
            logout-success-url：指定注销成功后返回的页面
            delete-cookies：指定退出时删除的cookies
        -->
        <security:logout delete-cookies="JSESSIONID" logout-url="/user/logout" logout-success-url="/index.jsp"/>

        <!--（5）关闭跨站请求，防止CSRF恶意攻击与利用-->
        <security:csrf disabled="true"/>

        <!--（6）自定义filter,并将之加入到 securityChain（过滤器链） 的指定位置中……
            注意：不能覆盖默认的过滤器-->
        <!--A、自定义验证码过滤器-->
        <security:custom-filter ref="kaptchaFilter" before="FORM_LOGIN_FILTER"/>
        <!--B、自定义异常解释过滤器。【在使用了自定义认证错误处理器后，此处配置无效了】
            注：自定义异常解释器需要放在EXCEPTION_TRANSLATION_FILTER之后
        <security:custom-filter ref="saveBackUrlFilter" after="PRE_AUTH_FILTER"/>-->
    </security:http>

    <!--5、各种自定义 bean 的实现-->
    <!--(1)自定义认证成功处理器-->
    <bean id="authenticationSuccessHandler" class="com.trainingcenter.security.handler.AuthenticationSuccessHandlerImpl"/>

    <!--(2)自定义认证失败处理器-->
    <bean id="authenticationFailureHandler" class="com.trainingcenter.security.handler.SimpleUrlAuthenticationFailureHandler">
        <property name="defaultFailureUrl" value="/user/goLogin"/>
    </bean>

    <!--（3）自定义验证码过滤器-->
    <bean id="kaptchaFilter" class="com.trainingcenter.security.filter.KaptchaAuthenticationFilter">
        <!--只有在访问url=/user/login时，该过滤器的验证才会生效-->
        <constructor-arg name="servletPath" value="/user/login"/>
        <constructor-arg name="failureUrl" value="/user/goLogin"/>

        <!--指向认证管理器：authenticationManager-->
        <property name="authenticationManager" ref="kaptchaAuthenticationManager"/>
    </bean>

    <!--(4)、自定义异常解释过滤器 【在使用了自定义认证错误处理器后，此处配置无效了】-->
    <bean id="saveBackUrlFilter"
          class="org.springframework.security.web.access.ExceptionTranslationFilter">

        <!--A、authenticationEntryPoint：在用户没有登录时用于引导用户进行登录认证的-->
        <constructor-arg name="authenticationEntryPoint" ref="authenticationEntryPoint"/>

        <!--B、accessDeniedHandler：处理用户已登录，但访问资源没有权限的异常-->

        <property name="accessDeniedHandler">
            <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
                <property name="errorPage" value="/webpages/errorpage/403.jsp" />
            </bean>
        </property>
    </bean>
    <!--自定义authenticationEntryPoint：引导未登录用户登录的入口页面-->
    <bean id="authenticationEntryPoint"
          class="com.trainingcenter.security.authentication.entrypoint.AuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/webpages/user/login.jsp"/>
    </bean>

</beans>