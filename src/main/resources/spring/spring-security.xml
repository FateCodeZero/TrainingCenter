<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

    <!--
        一、httpUrl访问规则设置
        -->
    <!-- 1、对所有过滤链放行 静态资源及指定页面的 url请求-->
    <security:http security="none" pattern="/webpages/static/**"/>
    <security:http security="none" pattern="/webpages/errorpage/**"/>
    <security:http security="none" pattern="/except/**"/>

    <security:http security="none" pattern="/index.jsp"/>
    <security:http security="none" pattern="/user/goLogin/**"/>
    <security:http security="none" pattern="/user/goRegister/**"/>
    <security:http security="none" pattern="/user/usernameCheck/**"/>
    <security:http security="none" pattern="/plug-in/**"/>

    <!--&lt;!&ndash;管理user目录下url的访问权限&ndash;&gt;-->
    <!--<security:http pattern="/webpages/user/**">-->
        <!--<security:form-login login-page="/webpages/user/login.jsp"-->
                             <!--login-processing-url="/user/login"-->
                             <!--username-parameter="username"-->
                             <!--password-parameter="password"-->
                             <!--default-target-url="/index.jsp"/>-->
        <!--<security:logout delete-cookies="JSESSIONID" logout-url="/user/logout" logout-success-url="/index.jsp"/>-->
        <!--<security:csrf disabled="true"/>-->
        <!--<security:custom-filter ref="kaptchaFilter" before="FORM_LOGIN_FILTER"/>-->
        <!--<security:custom-filter ref="exceptionTranslationFilter" after="EXCEPTION_TRANSLATION_FILTER"/>-->
        <!--<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>-->
    <!--</security:http>-->

    <!--管理项目下所有url的访问权限-->
    <security:http auto-config="false">
        <!--开启匿名访问支持
             key：用于指定一个在AuthenticationFilter和AuthenticationProvider之间共享的值。
             username：用于指定匿名用户所对应的用户名，
             granted-authority：用于指定匿名用户所具有的权限。
        -->
        <security:anonymous enabled="true" key="doesNotMatter" username="anonymousUser" granted-authority="ROLE_ANONYMOUS"/>

        <!--设置允许匿名访问的url，与security="none" 的区别security="none"是不会进入过滤器链的-->
        <security:intercept-url pattern="/webpages/user/userinfo.jsp" access="hasRole('ROLE_USER')"/>

        <!--管理员文件夹下需要管理员权限-->
        <security:intercept-url pattern="/webpages/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <!--
            2、规定指定页面的拦截规则
              intercept-url：指定拦截规则，pattern="/**"：表示对所有请求都拦截，至少需要的权限为ROLE_USER-->
        <!--<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>-->

        <!--
            3、设定登录规则：
            form-login：指定自定义登录页面为 /login.jsp。
                    login-page：指定自定义登录页面
                    login-processing-url：指定登录数据请求的url，
                    username-parameter：指定用户名输入框的name属性
                    password-parameter：指定密码输入框的name属性
                    default-target-url：指定直接请求登录页面的用户登录成功后返回的页面
                    authentication-success-forward-url：指定被拦截时登录成功后跳转的url
                    authentication-failure-url：指定登录认证失败返回的页面
                    authentication-success-handler-ref：指定自定义的登录成功后处理器，使用后之前设置的登录成功后跳转都会失效
                    authentication-failure-handler-ref：指定自定义的认证失败后处理器，使用后默认的认证失败后跳转都会失效
                    -->
        <security:form-login login-page="/webpages/static/login.jsp"
                             login-processing-url="/user/login"
                             username-parameter="username"
                             password-parameter="password"
                             default-target-url="/index.jsp"
                             authentication-success-handler-ref="authenticationSuccessHandler"
                             authentication-failure-handler-ref="authenticationFailureHandler"/>
        <!--4、注销：
            logout-url：指定注销请求的url
            logout-success-url：指定注销成功后返回的页面
            delete-cookies：指定退出时删除的cookies
        -->
        <security:logout delete-cookies="JSESSIONID" logout-url="/user/logout" logout-success-url="/index.jsp"/>

        <!--
            5、跨站请求设置（我们这里关闭）
               1)csrf disabled="true" 关闭 csrf ,如果不加会出现错误
               2)CSRF（Cross-site request forgery）:跨站请求伪造，
                 也被称为“One Click Attack”或者 SessionRiding，
                 通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。
         -->
        <security:csrf disabled="true"/>

        <!--6、自定义filter,并将之加入到 securityChain（过滤器链） 的指定位置中……
            注意：不能覆盖默认的过滤器-->
        <!--（1）自定义验证码过滤器-->
        <security:custom-filter ref="kaptchaFilter" before="FORM_LOGIN_FILTER"/>

        <!--（2）自定义异常解释过滤器，主要处理登录用户无权限时需要跳转的页面
                注：自定义异常解释器需要放在EXCEPTION_TRANSLATION_FILTER之后，否则没有作用
                【在使用了自定义认证错误处理器后，此处配置无效了】
             <security:custom-filter ref="exceptionTranslationFilter" after="EXCEPTION_TRANSLATION_FILTER"/>
        -->

    </security:http>

    <!--
        二、认证管理器设置
            1、可引用userDetailService作为用户登录验证的服务类，也可以自定义认证逻辑（authentication-provider）
            2、设置密码加密方式（注册与验证需要用同一种加密算法）
        -->
    <!--1、验证码认证管理器-->
    <security:authentication-manager id="kaptchaAuthenticationManager"/>

    <!--2、登录信息认证管理器 -->
    <security:authentication-manager id="userInfoAuthenticationManager">
        <!--
            获取自定义认证类对象（UserDetails）服务类
              user-service-ref：通过自定义UserDetailsService获取用户信息
        -->
        <!--<security:authentication-provider user-service-ref="userServiceImpl" >-->
        <!--&lt;!&ndash;使用bcrypt算法给密码加密&ndash;&gt;-->
        <!--<security:password-encoder ref="bcryptEncoder"/>-->
        <!--</security:authentication-provider>-->

        <!--自定义登录用户验证规则-->
        <security:authentication-provider ref="userAuthenticationProvider"/>

    </security:authentication-manager>


    <!--
        三、注册自定义组件
    -->
    <!--1、注册自定义数据库用户服务类，用以获取认证对象信息-->
    <bean id="userServiceImpl" class="com.trainingcenter.service.impl.UserServiceImpl"/>

    <!--2、注册加密算法类，使用BCryptPasswordEncoder密码加密方式-->
    <bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--3、注册自定义验证码效验过滤器
            每一个自定义的filter，必须包含 authenticationManager,securityMetadataSource，accessDecisionManager三个属性，
            authenticationManager：指向该过滤器所属的认证管理器，默认的authenticationManager会自动创建accessDecisionManager、securityMetadataSource
            securityMetadataSource：指向安全元数据源，用来获取被拦截url所需的全部权限
            accessDecisionManager：指向访问决策管理器（授权管理器），
                通过spring的全局缓存SecurityContextHolder获取用户的权限信息，
                还会获取被拦截的url和被拦截url所需的全部权限，然后根据所配的策略
                （有：一票决定，一票否定，少数服从多数等），如果权限足够，则返回，
                权限不够则报错并调用权限不足页面
     -->
    <bean id="kaptchaFilter" class="com.trainingcenter.security.filter.KaptchaAuthenticationFilter">
        <!--只有在访问url=/user/login时，该过滤器的验证才会生效-->
        <constructor-arg name="servletPath" value="/user/login"/>
        <constructor-arg name="failureUrl" value="/user/goLogin"/>

        <!--指向认证管理器：authenticationManager-->
        <property name="authenticationManager" ref="kaptchaAuthenticationManager"/>
    </bean>

    <!--4、自定义异常解释过滤器。【在使用了自定义认证错误处理器后，此处配置无效了】-->
    <!--<bean id="exceptionTranslationFilter"-->
          <!--class="org.springframework.security.web.access.ExceptionTranslationFilter">-->

        <!--&lt;!&ndash;（1）authenticationEntryPoint：在用户没有登录时用于引导用户进行登录认证的&ndash;&gt;-->
        <!--<constructor-arg name="authenticationEntryPoint" ref="authenticationEntryPoint"/>-->

        <!--&lt;!&ndash;（2）accessDeniedHandler：处理用户已登录，但访问资源没有权限的异常-->
            <!--使用自定义的访问资源无权限处理器-->
        <!--&ndash;&gt;-->
        <!--<property name="accessDeniedHandler" ref="accessDeniedHandler"/>-->
    <!--</bean>-->

    <!--自定义authenticationEntryPoint：引导未登录用户登录的入口页面-->
    <bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/webpages/static/login.jsp"/>
    </bean>

    <!--4、注册配置自定义用户登录效验类-->
    <bean id="userAuthenticationProvider"
          class="com.trainingcenter.security.authenticationproviders.UserAuthenticationProvider"/>

    <!--5、自定义认证成功处理器-->
    <bean id="authenticationSuccessHandler" class="com.trainingcenter.security.handler.AuthenticationSuccessHandlerImpl"/>

    <!--6、自定义认证失败处理器-->
    <bean id="authenticationFailureHandler" class="com.trainingcenter.security.handler.SimpleUrlAuthenticationFailureHandler">
        <property name="defaultFailureUrl" value="/user/goLogin"/>
    </bean>

    <!--7、自定义访问资源无权限处理器。【在使用了自定义认证错误处理器后，此处配置无效了】
    <bean id="accessDeniedHandler" class="com.trainingcenter.security.handler.AccessDeniedHandlerImpl"/>
    -->

</beans>